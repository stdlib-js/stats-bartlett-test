{
  "version": 3,
  "sources": ["../lib/variance.js", "../lib/validate.js", "../lib/print.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the unbiased variance of an array.\n*\n* @private\n* @param {NumericArray} arr - input array\n* @returns {number} variance\n*/\nfunction variance( arr ) {\n\tvar delta;\n\tvar mean;\n\tvar len;\n\tvar M2;\n\tvar i;\n\tvar x;\n\n\tdelta = 0.0;\n\tmean = 0.0;\n\tM2 = 0.0;\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tx = arr[ i ];\n\t\tdelta = x - mean;\n\t\tmean += delta / (i+1);\n\t\tM2 += delta * ( x - mean );\n\t}\n\treturn M2 / ( i - 1 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = variance;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert-is-array' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array. Option: `%s`.', 'groups', opts.groups ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: The variances in all groups are the same.';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + roundn( this.df, -dgts );\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar objectKeys = require( '@stdlib/utils-keys' );\nvar format = require( '@stdlib/string-format' );\nvar chisqCDF = require( '@stdlib/stats-base-dists-chisquare-cdf' );\nvar group = require( '@stdlib/utils-group' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar variance = require( './variance.js' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes Bartlett\u2019s test for equal variances.\n*\n* @param {...NumericArray} arguments - either two or more number arrays or a single numeric array if an array of group indicators is supplied as an option\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {TypeError} must provide array-like arguments\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {Error} must provide at least two array-like arguments if `groups` is not set\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = bartlett( x, y, z );\n* // returns {...}\n*/\nfunction bartlett() {\n\tvar options;\n\tvar ngroups;\n\tvar ninvSum;\n\tvar levels;\n\tvar table;\n\tvar alpha;\n\tvar nSum;\n\tvar vSum;\n\tvar args;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar arg;\n\tvar err;\n\tvar lnv;\n\tvar out;\n\tvar df;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\targs = [];\n\tngroups = arguments.length;\n\topts = {};\n\tif ( isPlainObject( arguments[ ngroups - 1 ] ) ) {\n\t\toptions = arguments[ ngroups - 1 ];\n\t\tngroups -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.groups ) {\n\t\ttable = group( arguments[ 0 ], opts.groups );\n\t\tlevels = objectKeys( table );\n\t\tngroups = levels.length;\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( format( 'invalid option. `%s` option must be an array containing at least two unique elements. Option: `%s`.', 'groups', levels ) );\n\t\t}\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( table[ levels[ i ] ] );\n\t\t}\n\t} else {\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t}\n\tnSum = 0;\n\tninvSum = 0.0;\n\tvSum = 0.0;\n\tlnv = 0.0;\n\tn = new Array( ngroups );\n\tv = n.slice();\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\targ = args[ i ];\n\t\tif ( !isCollection( arg ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide array-like arguments. Value: `%s`.', arg ) );\n\t\t}\n\t\tif ( arg.length === 0 ) {\n\t\t\tthrow new Error( format( 'invalid argument. Supplied arrays cannot be empty. Value: `%s`.', arg ) );\n\t\t}\n\t\tn[ i ] = arg.length - 1;\n\t\tnSum += n[ i ];\n\t\tninvSum += 1.0 / n[ i ];\n\t\tv[ i ] = variance( arg );\n\t\tvSum += ( n[ i ] * v[ i ] );\n\t\tlnv += n[ i ] * ln( v[ i ] );\n\t}\n\tvSum /= nSum;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', alpha ) );\n\t}\n\n\tstat = ( ( nSum * ln( vSum ) ) - lnv );\n\tstat /= ( 1.0 + ( ( ninvSum - ( 1.0 / nSum ) ) / ( 3 * ( ngroups-1 ) ) ) );\n\tdf = ngroups - 1;\n\tpval = 1.0 - chisqCDF( stat, df );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'method', 'Bartlett\\'s test of equal variances' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = bartlett;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute Bartlett\u2019s test for equal variances.\n*\n* @module @stdlib/stats-bartlett-test\n*\n* @example\n* var bartlettTest = require( '@stdlib/stats-bartlett-test' );\n*\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = bartlettTest( x, y, z );\n* // returns {...}\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_variance", "__commonJSMin", "exports", "module", "variance", "arr", "delta", "mean", "len", "M2", "i", "x", "require_validate", "__commonJSMin", "exports", "module", "isArray", "isNumber", "isObject", "isnan", "hasOwnProp", "format", "validate", "opts", "options", "require_print", "__commonJSMin", "exports", "module", "isPositiveInteger", "isObject", "isBoolean", "hasOwnProp", "format", "roundn", "print", "opts", "decision", "dgts", "str", "require_main", "__commonJSMin", "exports", "module", "isCollection", "isPlainObject", "setReadOnly", "objectKeys", "format", "chisqCDF", "group", "ln", "variance", "validate", "print", "bartlett", "options", "ngroups", "ninvSum", "levels", "table", "alpha", "nSum", "vSum", "args", "opts", "pval", "stat", "arg", "err", "lnv", "out", "df", "n", "v", "i", "main"]
}
