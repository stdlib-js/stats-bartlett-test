{"version":3,"file":"index.mjs","sources":["../lib/variance.js","../lib/validate.js","../lib/print.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the unbiased variance of an array.\n*\n* @private\n* @param {NumericArray} arr - input array\n* @returns {number} variance\n*/\nfunction variance( arr ) {\n\tvar delta;\n\tvar mean;\n\tvar len;\n\tvar M2;\n\tvar i;\n\tvar x;\n\n\tdelta = 0.0;\n\tmean = 0.0;\n\tM2 = 0.0;\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tx = arr[ i ];\n\t\tdelta = x - mean;\n\t\tmean += delta / (i+1);\n\t\tM2 += delta * ( x - mean );\n\t}\n\treturn M2 / ( i - 1 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert-is-array' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array. Option: `%s`.', 'groups', opts.groups ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: The variances in all groups are the same.';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + roundn( this.df, -dgts );\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar objectKeys = require( '@stdlib/utils-keys' );\nvar format = require( '@stdlib/string-format' );\nvar chisqCDF = require( '@stdlib/stats-base-dists-chisquare-cdf' );\nvar group = require( '@stdlib/utils-group' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar variance = require( './variance.js' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes Bartlettâ€™s test for equal variances.\n*\n* @param {...NumericArray} arguments - either two or more number arrays or a single numeric array if an array of group indicators is supplied as an option\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {TypeError} must provide array-like arguments\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {Error} must provide at least two array-like arguments if `groups` is not set\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = bartlett( x, y, z );\n* // returns {...}\n*/\nfunction bartlett() {\n\tvar options;\n\tvar ngroups;\n\tvar ninvSum;\n\tvar levels;\n\tvar table;\n\tvar alpha;\n\tvar nSum;\n\tvar vSum;\n\tvar args;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar arg;\n\tvar err;\n\tvar lnv;\n\tvar out;\n\tvar df;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\targs = [];\n\tngroups = arguments.length;\n\topts = {};\n\tif ( isPlainObject( arguments[ ngroups - 1 ] ) ) {\n\t\toptions = arguments[ ngroups - 1 ];\n\t\tngroups -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.groups ) {\n\t\ttable = group( arguments[ 0 ], opts.groups );\n\t\tlevels = objectKeys( table );\n\t\tngroups = levels.length;\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( format( 'invalid number of groups. `%s` array must contain at least two unique elements. Value: `%s`.', 'groups', levels ) );\n\t\t}\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( table[ levels[ i ] ] );\n\t\t}\n\t} else {\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t}\n\tnSum = 0;\n\tninvSum = 0.0;\n\tvSum = 0.0;\n\tlnv = 0.0;\n\tn = new Array( ngroups );\n\tv = n.slice();\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\targ = args[ i ];\n\t\tif ( !isCollection( arg ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide array-like arguments. Value: `%s`.', arg ) );\n\t\t}\n\t\tif ( arg.length === 0 ) {\n\t\t\tthrow new Error( format( 'invalid argument. Supplied arrays cannot be empty. Value: `%s`.', arg ) );\n\t\t}\n\t\tn[ i ] = arg.length - 1;\n\t\tnSum += n[ i ];\n\t\tninvSum += 1.0 / n[ i ];\n\t\tv[ i ] = variance( arg );\n\t\tvSum += ( n[ i ] * v[ i ] );\n\t\tlnv += n[ i ] * ln( v[ i ] );\n\t}\n\tvSum /= nSum;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `%f`.', alpha ) );\n\t}\n\n\tstat = ( ( nSum * ln( vSum ) ) - lnv );\n\tstat /= ( 1.0 + ( ( ninvSum - ( 1.0 / nSum ) ) / ( 3 * ( ngroups-1 ) ) ) );\n\tdf = ngroups - 1;\n\tpval = 1.0 - chisqCDF( stat, df );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'method', 'Bartlett\\'s test of equal variances' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = bartlett;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute Bartlettâ€™s test for equal variances.\n*\n* @module @stdlib/stats-bartlett-test\n*\n* @example\n* var bartlettTest = require( '@stdlib/stats-bartlett-test' );\n*\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = bartlettTest( x, y, z );\n* // returns {...}\n*/\n\n// MODULES //\n\nvar bartlettTest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = bartlettTest;\n"],"names":["variance_1","arr","delta","mean","len","M2","i","x","length","isArray","require$$0","isNumber","require$$1","isPrimitive","isObject","require$$2","isnan","require$$3","hasOwnProp","require$$4","format","require$$5","validate_1","opts","options","alpha","TypeError","groups","isPositiveInteger","isBoolean","roundn","isCollection","isPlainObject","setReadOnly","objectKeys","chisqCDF","group","require$$6","ln","require$$7","variance","require$$8","validate","require$$9","print","decision","dgts","str","arguments","digits","this","method","pValue","statistic","df","rejected","lib","ngroups","ninvSum","levels","table","nSum","vSum","args","pval","stat","arg","err","lnv","out","n","v","Error","push","Array","slice","RangeError"],"mappings":"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"}