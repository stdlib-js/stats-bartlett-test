{"version":3,"file":"index.mjs","sources":["../lib/variance.js","../lib/print.js","../lib/main.js","../lib/validate.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the unbiased variance of an array.\n*\n* @private\n* @param {NumericArray} arr - input array\n* @returns {number} variance\n*/\nfunction variance( arr ) {\n\tvar delta;\n\tvar mean;\n\tvar len;\n\tvar M2;\n\tvar i;\n\tvar x;\n\n\tdelta = 0.0;\n\tmean = 0.0;\n\tM2 = 0.0;\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tx = arr[ i ];\n\t\tdelta = x - mean;\n\t\tmean += delta / (i+1);\n\t\tM2 += delta * ( x - mean );\n\t}\n\treturn M2 / ( i - 1 );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport roundn from '@stdlib/math-base-special-roundn';\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '0th3L', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( '0th3P', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( '0th2o', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: The variances in all groups are the same.';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + roundn( this.df, -dgts );\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport objectKeys from '@stdlib/utils-keys';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport chisqCDF from '@stdlib/stats-base-dists-chisquare-cdf';\nimport group from '@stdlib/utils-group';\nimport ln from '@stdlib/math-base-special-ln';\nimport variance from './variance.js';\nimport validate from './validate.js';\nimport print from './print.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes Bartlettâ€™s test for equal variances.\n*\n* @param {...NumericArray} arguments - either two or more number arrays or a single numeric array if an array of group indicators is supplied as an option\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {TypeError} must provide array-like arguments\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {Error} must provide at least two array-like arguments if `groups` is not set\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = bartlett( x, y, z );\n* // returns {...}\n*/\nfunction bartlett() {\n\tvar options;\n\tvar ngroups;\n\tvar ninvSum;\n\tvar levels;\n\tvar table;\n\tvar alpha;\n\tvar nSum;\n\tvar vSum;\n\tvar args;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar arg;\n\tvar err;\n\tvar lnv;\n\tvar out;\n\tvar df;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\targs = [];\n\tngroups = arguments.length;\n\topts = {};\n\tif ( isPlainObject( arguments[ ngroups - 1 ] ) ) {\n\t\toptions = arguments[ ngroups - 1 ];\n\t\tngroups -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.groups ) {\n\t\ttable = group( arguments[ 0 ], opts.groups );\n\t\tlevels = objectKeys( table );\n\t\tngroups = levels.length;\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( format( '0th8W', 'groups', levels ) );\n\t\t}\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( table[ levels[ i ] ] );\n\t\t}\n\t} else {\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t}\n\tnSum = 0;\n\tninvSum = 0.0;\n\tvSum = 0.0;\n\tlnv = 0.0;\n\tn = new Array( ngroups );\n\tv = n.slice();\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\targ = args[ i ];\n\t\tif ( !isCollection( arg ) ) {\n\t\t\tthrow new TypeError( format( '0th8X', arg ) );\n\t\t}\n\t\tif ( arg.length === 0 ) {\n\t\t\tthrow new Error( format( '0th8Y', arg ) );\n\t\t}\n\t\tn[ i ] = arg.length - 1;\n\t\tnSum += n[ i ];\n\t\tninvSum += 1.0 / n[ i ];\n\t\tv[ i ] = variance( arg );\n\t\tvSum += ( n[ i ] * v[ i ] );\n\t\tlnv += n[ i ] * ln( v[ i ] );\n\t}\n\tvSum /= nSum;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( '0th8V', 'alpha', alpha ) );\n\t}\n\n\tstat = ( ( nSum * ln( vSum ) ) - lnv );\n\tstat /= ( 1.0 + ( ( ninvSum - ( 1.0 / nSum ) ) / ( 3 * ( ngroups-1 ) ) ) );\n\tdf = ngroups - 1;\n\tpval = 1.0 - chisqCDF( stat, df );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'method', 'Bartlett\\'s test of equal variances' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default bartlett;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArray from '@stdlib/assert-is-array';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport isnan from '@stdlib/assert-is-nan';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0th2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '0th8P', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( format( '0th8Z', 'groups', opts.groups ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n"],"names":["variance","arr","delta","mean","len","M2","i","x","length","print","opts","decision","dgts","str","arguments","isObject","TypeError","format","hasOwnProp","isPositiveInteger","digits","isBoolean","this","method","roundn","pValue","statistic","df","rejected","alpha","bartlett","options","ngroups","ninvSum","levels","table","nSum","vSum","args","pval","stat","arg","err","lnv","out","n","v","isPlainObject","isNumber","isnan","groups","isArray","validate","group","objectKeys","Error","push","Array","slice","isCollection","ln","RangeError","chisqCDF","setReadOnly"],"mappings":"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"}