// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-collection@v0.1.0-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.1.0-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-read-only-property@v0.1.1-esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-keys@v0.1.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-chisquare-cdf@v0.1.0-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-group@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-ln@v0.1.1-esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-array@v0.1.1-esm/index.mjs";import{isPrimitive as p}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@v0.1.1-esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@v0.1.1-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.1.1-esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@v0.1.0-esm/index.mjs";import{isPrimitive as u}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@v0.1.1-esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-roundn@v0.1.0-esm/index.mjs";function j(t){var s,i,e,n,r,o;for(s=0,i=0,n=0,e=t.length,r=0;r<e;r++)n+=(s=(o=t[r])-i)*(o-(i+=s/(r+1)));return n/(r-1)}function g(t,i){return s(i)?m(i,"alpha")&&(t.alpha=i.alpha,!p(t.alpha)||d(t.alpha))?new TypeError(n("invalid option. `%s` option must be a number. Option: `%s`.","alpha",t.alpha)):m(i,"groups")&&(t.groups=i.groups,!l(t.groups))?new TypeError(n("invalid option. `%s` option must be an array. Option: `%s`.","groups",t.groups)):null:new TypeError(n("invalid argument. Options argument must be an object. Value: `%s`.",i))}function c(t){var i,e,r;if(e=4,i=!0,arguments.length>0){if(!s(t))throw new TypeError(n("invalid argument. First argument must be an object. Value: `%s`.",t));if(m(t,"digits")){if(!h(t.digits))throw new TypeError(n("invalid option. `%s` option must be a positive integer. Option: `%s`.","digits",t.digits));e=t.digits}if(m(t,"decision")){if(!u(t.decision))throw new TypeError(n("invalid option. `%s` option must be a boolean. Option: `%s`.","decision",t.decision));i=t.decision}}return r="",r+=this.method,r+="\n\n",r+="Null hypothesis: The variances in all groups are the same.",r+="\n\n",r+="    pValue: "+v(this.pValue,-e)+"\n",r+="    statistic: "+v(this.statistic,-e)+"\n",r+="    df: "+v(this.df,-e),r+="\n\n",i&&(r+="Test Decision: ",this.rejected?r+="Reject null in favor of alternative at "+100*this.alpha+"% significance level":r+="Fail to reject null in favor of alternative at "+100*this.alpha+"% significance level",r+="\n"),r}function f(){var l,p,d,m,h,u,v,f,b,w,y,x,E,T,O,V,q,k,F,R;if(b=[],w={},s(arguments[(p=arguments.length)-1])&&(l=arguments[p-1],p-=1,T=g(w,l)))throw T;if(w.groups){if(h=o(arguments[0],w.groups),(p=(m=e(h)).length)<2)throw new Error(n("invalid option. `%s` option must be an array containing at least two unique elements. Option: `%s`.","groups",m));for(R=0;R<p;R++)b.push(h[m[R]])}else for(R=0;R<p;R++)b.push(arguments[R]);for(v=0,d=0,f=0,O=0,F=(k=new Array(p)).slice(),R=0;R<p;R++){if(E=b[R],!t(E))throw new TypeError(n("invalid argument. Must provide array-like arguments. Value: `%s`.",E));if(0===E.length)throw new Error(n("invalid argument. Supplied arrays cannot be empty. Value: `%s`.",E));k[R]=E.length-1,v+=k[R],d+=1/k[R],F[R]=j(E),f+=k[R]*F[R],O+=k[R]*a(F[R])}if(f/=v,(u=void 0===w.alpha?.05:w.alpha)<0||u>1)throw new RangeError(n("invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.","alpha",u));return x=v*a(f)-O,y=1-r(x/=1+(d-1/v)/(3*(p-1)),q=p-1),i(V={},"rejected",y<=u),i(V,"alpha",u),i(V,"pValue",y),i(V,"statistic",x),i(V,"df",q),i(V,"method","Bartlett's test of equal variances"),i(V,"print",c),V}export{f as default};
//# sourceMappingURL=index.mjs.map
